load("@pip_deps//:requirements.bzl", "requirement")

# Third-party python package dependencies.
# This file is auto-generated.

package(default_visibility = ["//visibility:public"])

# Expose this so it can be updated by "bazel run //third_party:update_py_build" command
exports_files([
    "BUILD",
])

py_library(
    name = "absl-py",
    deps = [
        ":six",
        requirement("absl-py"),
    ],
)

py_library(
    name = "apache-beam",
    deps = [
        ":avro-python3",
        ":crcmod",
        ":dill",
        ":fastavro",
        ":freezegun",
        ":future",
        ":grpcio",
        ":hdfs",
        ":httplib2",
        ":mock",
        ":nose",
        ":nose-xunitmp",
        ":numpy",
        ":oauth2client",
        ":orjson",
        ":pandas",
        ":parameterized",
        ":protobuf",
        ":psycopg2-binary",
        ":pyarrow",
        ":pydot",
        ":pyhamcrest",
        ":pymongo",
        ":pytest",
        ":pytest-timeout",
        ":pytest-xdist",
        ":python-dateutil",
        ":pytz",
        ":pyyaml",
        ":requests",
        ":requests-mock",
        ":sqlalchemy",
        ":tenacity",
        ":testcontainers",
        ":typing-extensions",
        requirement("apache-beam"),
    ],
)

py_library(
    name = "argon2-cffi",
    deps = [
        ":cffi",
        requirement("argon2-cffi"),
    ],
)

py_library(
    name = "astunparse",
    deps = [
        ":six",
        ":wheel",
        requirement("astunparse"),
    ],
)

py_library(
    name = "atomicwrites",
    deps = [requirement("atomicwrites")],
)

py_library(
    name = "attrs",
    deps = [requirement("attrs")],
)

py_library(
    name = "avro-python3",
    deps = [requirement("avro-python3")],
)

py_library(
    name = "backcall",
    deps = [requirement("backcall")],
)

py_library(
    name = "bleach",
    deps = [
        ":packaging",
        ":six",
        ":webencodings",
        requirement("bleach"),
    ],
)

py_library(
    name = "cachetools",
    deps = [requirement("cachetools")],
)

py_library(
    name = "certifi",
    deps = [requirement("certifi")],
)

py_library(
    name = "cffi",
    deps = [
        ":pycparser",
        requirement("cffi"),
    ],
)

py_library(
    name = "charset-normalizer",
    deps = [requirement("charset-normalizer")],
)

py_library(
    name = "clang",
    deps = [requirement("clang")],
)

py_library(
    name = "crcmod",
    deps = [requirement("crcmod")],
)

py_library(
    name = "debugpy",
    deps = [requirement("debugpy")],
)

py_library(
    name = "decorator",
    deps = [requirement("decorator")],
)

py_library(
    name = "defusedxml",
    deps = [requirement("defusedxml")],
)

py_library(
    name = "deprecation",
    deps = [
        ":packaging",
        requirement("deprecation"),
    ],
)

py_library(
    name = "dill",
    deps = [requirement("dill")],
)

py_library(
    name = "docker",
    deps = [
        ":requests",
        ":websocket-client",
        requirement("docker"),
    ],
)

py_library(
    name = "docopt",
    deps = [requirement("docopt")],
)

py_library(
    name = "entrypoints",
    deps = [requirement("entrypoints")],
)

py_library(
    name = "execnet",
    deps = [requirement("execnet")],
)

py_library(
    name = "fastavro",
    deps = [requirement("fastavro")],
)

py_library(
    name = "flatbuffers",
    deps = [requirement("flatbuffers")],
)

py_library(
    name = "freezegun",
    deps = [
        ":python-dateutil",
        requirement("freezegun"),
    ],
)

py_library(
    name = "future",
    deps = [requirement("future")],
)

py_library(
    name = "gast",
    deps = [requirement("gast")],
)

py_library(
    name = "google-auth",
    deps = [
        ":cachetools",
        ":pyasn1-modules",
        ":rsa",
        ":setuptools",
        ":six",
        requirement("google-auth"),
    ],
)

py_library(
    name = "google-auth-oauthlib",
    deps = [
        ":google-auth",
        ":requests-oauthlib",
        requirement("google-auth-oauthlib"),
    ],
)

py_library(
    name = "google-pasta",
    deps = [
        ":six",
        requirement("google-pasta"),
    ],
)

py_library(
    name = "greenlet",
    deps = [requirement("greenlet")],
)

py_library(
    name = "grpcio",
    deps = [
        ":six",
        requirement("grpcio"),
    ],
)

py_library(
    name = "grpcio-testing",
    deps = [
        ":grpcio",
        ":protobuf",
        requirement("grpcio-testing"),
    ],
)

py_library(
    name = "h5py",
    deps = [
        ":numpy",
        requirement("h5py"),
    ],
)

py_library(
    name = "hdfs",
    deps = [
        ":docopt",
        ":requests",
        ":six",
        requirement("hdfs"),
    ],
)

py_library(
    name = "httplib2",
    deps = [
        ":pyparsing",
        requirement("httplib2"),
    ],
)

py_library(
    name = "idna",
    deps = [requirement("idna")],
)

py_library(
    name = "ipykernel",
    deps = [
        ":debugpy",
        ":ipython",
        ":ipython-genutils",
        ":jupyter-client",
        ":matplotlib-inline",
        ":tornado",
        ":traitlets",
        requirement("ipykernel"),
    ],
)

py_library(
    name = "ipython",
    deps = [
        ":backcall",
        ":decorator",
        ":jedi",
        ":matplotlib-inline",
        ":pexpect",
        ":pickleshare",
        ":prompt-toolkit",
        ":pygments",
        ":setuptools",
        ":traitlets",
        requirement("ipython"),
    ],
)

py_library(
    name = "ipython-genutils",
    deps = [requirement("ipython-genutils")],
)

py_library(
    name = "jedi",
    deps = [
        ":parso",
        requirement("jedi"),
    ],
)

py_library(
    name = "jinja2",
    deps = [
        ":markupsafe",
        requirement("jinja2"),
    ],
)

py_library(
    name = "jsonschema",
    deps = [
        ":attrs",
        ":pyrsistent",
        ":setuptools",
        ":six",
        requirement("jsonschema"),
    ],
)

py_library(
    name = "jupyter-client",
    deps = [
        ":entrypoints",
        ":jupyter-core",
        ":nest-asyncio",
        ":python-dateutil",
        ":pyzmq",
        ":tornado",
        ":traitlets",
        requirement("jupyter-client"),
    ],
)

py_library(
    name = "jupyter-core",
    deps = [
        ":traitlets",
        requirement("jupyter-core"),
    ],
)

py_library(
    name = "jupyterlab-pygments",
    deps = [
        ":pygments",
        requirement("jupyterlab-pygments"),
    ],
)

py_library(
    name = "keras",
    deps = [requirement("keras")],
)

py_library(
    name = "keras-preprocessing",
    deps = [
        ":numpy",
        ":six",
        requirement("keras-preprocessing"),
    ],
)

py_library(
    name = "markdown",
    deps = [requirement("markdown")],
)

py_library(
    name = "markupsafe",
    deps = [requirement("markupsafe")],
)

py_library(
    name = "matplotlib-inline",
    deps = [
        ":traitlets",
        requirement("matplotlib-inline"),
    ],
)

py_library(
    name = "mistune",
    deps = [requirement("mistune")],
)

py_library(
    name = "mock",
    deps = [
        ":pbr",
        ":six",
        requirement("mock"),
    ],
)

py_library(
    name = "more-itertools",
    deps = [requirement("more-itertools")],
)

py_library(
    name = "nbclient",
    deps = [
        ":jupyter-client",
        ":nbformat",
        ":nest-asyncio",
        ":traitlets",
        requirement("nbclient"),
    ],
)

py_library(
    name = "nbconvert",
    deps = [
        ":bleach",
        ":defusedxml",
        ":entrypoints",
        ":jinja2",
        ":jupyter-core",
        ":jupyterlab-pygments",
        ":mistune",
        ":nbclient",
        ":nbformat",
        ":pandocfilters",
        ":pygments",
        ":testpath",
        ":traitlets",
        requirement("nbconvert"),
    ],
)

py_library(
    name = "nbformat",
    deps = [
        ":ipython-genutils",
        ":jsonschema",
        ":jupyter-core",
        ":traitlets",
        requirement("nbformat"),
    ],
)

py_library(
    name = "nest-asyncio",
    deps = [requirement("nest-asyncio")],
)

py_library(
    name = "nose",
    deps = [requirement("nose")],
)

py_library(
    name = "nose-xunitmp",
    deps = [
        ":nose",
        requirement("nose-xunitmp"),
    ],
)

py_library(
    name = "notebook",
    deps = [
        ":argon2-cffi",
        ":ipykernel",
        ":ipython-genutils",
        ":jinja2",
        ":jupyter-client",
        ":jupyter-core",
        ":nbconvert",
        ":nbformat",
        ":prometheus-client",
        ":pyzmq",
        ":send2trash",
        ":terminado",
        ":tornado",
        ":traitlets",
        requirement("notebook"),
    ],
)

py_library(
    name = "numpy",
    deps = [requirement("numpy")],
)

py_library(
    name = "oauth2client",
    deps = [
        ":httplib2",
        ":pyasn1",
        ":pyasn1-modules",
        ":rsa",
        ":six",
        requirement("oauth2client"),
    ],
)

py_library(
    name = "oauthlib",
    deps = [requirement("oauthlib")],
)

py_library(
    name = "opt-einsum",
    deps = [
        ":numpy",
        requirement("opt-einsum"),
    ],
)

py_library(
    name = "orjson",
    deps = [requirement("orjson")],
)

py_library(
    name = "packaging",
    deps = [
        ":pyparsing",
        requirement("packaging"),
    ],
)

py_library(
    name = "pandas",
    deps = [
        ":numpy",
        ":python-dateutil",
        ":pytz",
        requirement("pandas"),
    ],
)

py_library(
    name = "pandocfilters",
    deps = [requirement("pandocfilters")],
)

py_library(
    name = "parameterized",
    deps = [requirement("parameterized")],
)

py_library(
    name = "parso",
    deps = [requirement("parso")],
)

py_library(
    name = "pbr",
    deps = [requirement("pbr")],
)

py_library(
    name = "pexpect",
    deps = [
        ":ptyprocess",
        requirement("pexpect"),
    ],
)

py_library(
    name = "pickleshare",
    deps = [requirement("pickleshare")],
)

py_library(
    name = "pluggy",
    deps = [requirement("pluggy")],
)

py_library(
    name = "prometheus-client",
    deps = [requirement("prometheus-client")],
)

py_library(
    name = "prompt-toolkit",
    deps = [
        ":wcwidth",
        requirement("prompt-toolkit"),
    ],
)

py_library(
    name = "protobuf",
    deps = [requirement("protobuf")],
)

py_library(
    name = "psycopg2-binary",
    deps = [requirement("psycopg2-binary")],
)

py_library(
    name = "ptyprocess",
    deps = [requirement("ptyprocess")],
)

py_library(
    name = "py",
    deps = [requirement("py")],
)

py_library(
    name = "pyarrow",
    deps = [
        ":numpy",
        requirement("pyarrow"),
    ],
)

py_library(
    name = "pyasn1",
    deps = [requirement("pyasn1")],
)

py_library(
    name = "pyasn1-modules",
    deps = [
        ":pyasn1",
        requirement("pyasn1-modules"),
    ],
)

py_library(
    name = "pycparser",
    deps = [requirement("pycparser")],
)

py_library(
    name = "pydot",
    deps = [
        ":pyparsing",
        requirement("pydot"),
    ],
)

py_library(
    name = "pygments",
    deps = [requirement("pygments")],
)

py_library(
    name = "pyhamcrest",
    deps = [
        ":six",
        requirement("pyhamcrest"),
    ],
)

py_library(
    name = "pymongo",
    deps = [requirement("pymongo")],
)

py_library(
    name = "pyparsing",
    deps = [requirement("pyparsing")],
)

py_library(
    name = "pyrsistent",
    deps = [requirement("pyrsistent")],
)

py_library(
    name = "pytest",
    deps = [
        ":atomicwrites",
        ":attrs",
        ":more-itertools",
        ":packaging",
        ":pluggy",
        ":py",
        ":six",
        ":wcwidth",
        requirement("pytest"),
    ],
)

py_library(
    name = "pytest-forked",
    deps = [
        ":py",
        ":pytest",
        requirement("pytest-forked"),
    ],
)

py_library(
    name = "pytest-timeout",
    deps = [
        ":pytest",
        requirement("pytest-timeout"),
    ],
)

py_library(
    name = "pytest-xdist",
    deps = [
        ":execnet",
        ":pytest",
        ":pytest-forked",
        ":six",
        requirement("pytest-xdist"),
    ],
)

py_library(
    name = "python-dateutil",
    deps = [
        ":six",
        requirement("python-dateutil"),
    ],
)

py_library(
    name = "pytz",
    deps = [requirement("pytz")],
)

py_library(
    name = "pyyaml",
    deps = [requirement("pyyaml")],
)

py_library(
    name = "pyzmq",
    deps = [requirement("pyzmq")],
)

py_library(
    name = "requests",
    deps = [
        ":certifi",
        ":charset-normalizer",
        ":idna",
        ":urllib3",
        requirement("requests"),
    ],
)

py_library(
    name = "requests-mock",
    deps = [
        ":requests",
        ":six",
        requirement("requests-mock"),
    ],
)

py_library(
    name = "requests-oauthlib",
    deps = [
        ":oauthlib",
        ":requests",
        requirement("requests-oauthlib"),
    ],
)

py_library(
    name = "rsa",
    deps = [
        ":pyasn1",
        requirement("rsa"),
    ],
)

py_library(
    name = "send2trash",
    deps = [requirement("send2trash")],
)

py_library(
    name = "setuptools",
    deps = [requirement("setuptools")],
)

py_library(
    name = "six",
    deps = [requirement("six")],
)

py_library(
    name = "sqlalchemy",
    deps = [
        ":greenlet",
        requirement("sqlalchemy"),
    ],
)

py_library(
    name = "tenacity",
    deps = [
        ":six",
        requirement("tenacity"),
    ],
)

py_library(
    name = "tensorboard",
    deps = [
        ":absl-py",
        ":google-auth",
        ":google-auth-oauthlib",
        ":grpcio",
        ":markdown",
        ":numpy",
        ":protobuf",
        ":requests",
        ":setuptools",
        ":tensorboard-data-server",
        ":tensorboard-plugin-wit",
        ":werkzeug",
        ":wheel",
        requirement("tensorboard"),
    ],
)

py_library(
    name = "tensorboard-data-server",
    deps = [requirement("tensorboard-data-server")],
)

py_library(
    name = "tensorboard-plugin-wit",
    deps = [requirement("tensorboard-plugin-wit")],
)

py_library(
    name = "tensorflow",
    deps = [
        ":absl-py",
        ":astunparse",
        ":clang",
        ":flatbuffers",
        ":gast",
        ":google-pasta",
        ":grpcio",
        ":h5py",
        ":keras",
        ":keras-preprocessing",
        ":numpy",
        ":opt-einsum",
        ":protobuf",
        ":six",
        ":tensorboard",
        ":tensorflow-estimator",
        ":termcolor",
        ":typing-extensions",
        ":wheel",
        ":wrapt",
        requirement("tensorflow"),
    ],
)

py_library(
    name = "tensorflow-estimator",
    deps = [requirement("tensorflow-estimator")],
)

py_library(
    name = "termcolor",
    deps = [requirement("termcolor")],
)

py_library(
    name = "terminado",
    deps = [
        ":ptyprocess",
        ":tornado",
        requirement("terminado"),
    ],
)

py_library(
    name = "testcontainers",
    deps = [
        ":deprecation",
        ":docker",
        ":wrapt",
        requirement("testcontainers"),
    ],
)

py_library(
    name = "testpath",
    deps = [requirement("testpath")],
)

py_library(
    name = "tornado",
    deps = [requirement("tornado")],
)

py_library(
    name = "traitlets",
    deps = [requirement("traitlets")],
)

py_library(
    name = "typing-extensions",
    deps = [requirement("typing-extensions")],
)

py_library(
    name = "urllib3",
    deps = [requirement("urllib3")],
)

py_library(
    name = "wcwidth",
    deps = [requirement("wcwidth")],
)

py_library(
    name = "webencodings",
    deps = [requirement("webencodings")],
)

py_library(
    name = "websocket-client",
    deps = [requirement("websocket-client")],
)

py_library(
    name = "werkzeug",
    deps = [requirement("werkzeug")],
)

py_library(
    name = "wheel",
    deps = [requirement("wheel")],
)

py_library(
    name = "wrapt",
    deps = [requirement("wrapt")],
)
